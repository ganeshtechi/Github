#!/usr/bin/env groovy

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 2, unit: 'HOURS')
        timestamps()
    }

    tools {
        jdk 'openjdk-11'
        maven 'maven 3.6.3'
        dockerTool 'docker-latest'
    }

    environment {
        POM_VERSION = readMavenPom().getVersion() 
        // To read the artifact version
        JAR_NAME = readMavenPom().getArtifactId() #
        // Reading artifact version
        AWS_ECR_REGION = 'us-east-1'
        AWS_ECS_SERVICE = 'dev-api-service'
        AWS_ECS_TASK_DEFINITION = 'dev-api-taskdefinition'
        AWS_ECS_COMPATIBILITY = 'FARGATE'
        //Using fargate profile to deploy
        AWS_ECS_NETWORK_MODE = 'awsvpc'
        //Fargate uses awsvpc default networking
        AWS_ECS_CPU = '256'
        //The CPU, I'm assigning to my tasks
        AWS_ECS_MEMORY = '512'
        //The memory, I'm assigning to my tasks
        AWS_ECS_CLUSTER = 'dev-api-cluster'
        AWS_ECS_TASK_DEFINITION_PATH = './ecs/container-definition-update-image.json'
        //It is the task definition file that has container level information, to rollout new version we have to update container image in this file
        //In this case docker images are tagged based on artifact POM version, and the same is being pushed to ECR.
    }

    stages {
        stage('Build & Test') {
            steps {
            withMaven(options: [artifactsPublisher(), mavenLinkerPublisher(), dependenciesFingerprintPublisher(disabled: true), jacocoPublisher(disabled: true), junitPublisher(disabled: true)]) {
            sh "mvn clean package"
            }
            }
        }

        stage('Build Docker Image') {
            steps {
                withCredentials([string(credentialsId: 'AWS_REPOSITORY_URL_SECRET', variable: 'AWS_ECR_URL')]) {
                //AWS_REPOSITORY_URL_SECRET variable is AWS Secrets which I configure as Jenkins secrets
                script {
                    docker.build("${AWS_ECR_URL}:${POM_VERSION}", "--build-arg JAR_FILE=${JAR_NAME} .")
                        }
                    }
                }
            }

        stage('Push Image to ECR') {
            steps {
                withCredentials([string(credentialsId: 'AWS_REPOSITORY_URL_SECRET', variable: 'AWS_ECR_URL')]) {
                withAWS(region: "${AWS_ECR_REGION}", credentials: 'aws-ecr-secret') {
                    script {
                    def login = ecrLogin()
                    sh('#!/bin/sh -e\n' + "${login}")
                    docker.image("${AWS_ECR_URL}:${POM_VERSION}").push()
                            }
                        }
                    }
                }
            }

        stage('Deploy in ECS') {
            steps {
                withCredentials([string(credentialsId: 'AWS_EXECUTION_ROL_SECRET', variable: 'AWS_ECS_EXECUTION_ROL'),string(credentialsId: 'AWS_REPOSITORY_URL_SECRET', variable: 'AWS_ECR_URL')]) {
                script {
                    updateContainerDefinitionJsonWithImageVersion()
                    sh("/usr/local/bin/aws ecs register-task-definition --region ${AWS_ECR_REGION} --family ${AWS_ECS_TASK_DEFINITION} --execution-role-arn ${AWS_ECS_EXECUTION_ROL} --requires-compatibilities ${AWS_ECS_COMPATIBILITY} --network-mode ${AWS_ECS_NETWORK_MODE} --cpu ${AWS_ECS_CPU} --memory ${AWS_ECS_MEMORY} --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH}")
                    def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true)
                    sh("/usr/local/bin/aws ecs update-service --cluster ${AWS_ECS_CLUSTER} --service ${AWS_ECS_SERVICE} --task-definition ${AWS_ECS_TASK_DEFINITION}:${taskRevision}")
                        }
                    }
                }
            }
    }
//The stage is for code coverage information using jacoco and clean our directory and remove the docker image from our local repository.
    post {
        always {
            withCredentials([string(credentialsId: 'AWS_REPOSITORY_URL_SECRET', variable: 'AWS_ECR_URL')]) {
                junit allowEmptyResults: true, testResults: 'target/surfire-reports/*.xml'
                publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'target/site/jacoco-ut/', reportFiles: 'index.html', reportName: 'Unit Testing Coverage', reportTitles: 'Unit Testing Coverage'])
                jacoco(execPattern: 'target/jacoco-ut.exec')
                deleteDir()
                sh "docker rmi ${AWS_ECR_URL}:${POM_VERSION}"
            }
        }
    }
}
